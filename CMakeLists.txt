cmake_minimum_required(VERSION 3.16)
include(ExternalProject)

project(strobealign VERSION 0.7.1)
include(FetchContent)

configure_file(
    "${PROJECT_SOURCE_DIR}/src/version.hpp.in"
    "${PROJECT_BINARY_DIR}/version.hpp"
)
option(ENABLE_AVX "Enable AVX2 support" OFF)

find_package(ZLIB)
find_package(Threads)
find_package(OpenMP)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
set(CMAKE_CXX_FLAGS_RELWITHDEBINFO "-O3 -g")

if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE "Release" CACHE STRING
      "Choose the type of build, options are: RelWithDebInfo Debug Release" FORCE)
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "RelWithDebInfo" "Debug" "Release")
endif()

message(STATUS "Build type: ${CMAKE_BUILD_TYPE}")
ExternalProject_Add(wfa2
  GIT_REPOSITORY https://github.com/smarco/WFA2-lib.git
  GIT_TAG v2.3.2
  INSTALL_COMMAND ""
)
foreach(lib wfa wfacpp)
  add_library(${lib} STATIC IMPORTED GLOBAL)
  set_property(TARGET ${lib}
    PROPERTY IMPORTED_LOCATION
    ${CMAKE_CURRENT_BINARY_DIR}/wfa2-prefix/src/wfa2/lib/lib${lib}.a
  )
endforeach()

add_compile_options(-Wall -Wextra)

FetchContent_Declare(cmake_git_version_tracking
  GIT_REPOSITORY https://github.com/andrew-hardin/cmake-git-version-tracking.git
  GIT_TAG 904dbda1336ba4b9a1415a68d5f203f576b696bb
)
FetchContent_MakeAvailable(cmake_git_version_tracking)

add_library(salib STATIC ${SOURCES}
  src/refs.cpp
  src/fastq.cpp
  src/cmdline.cpp
  src/index.cpp
  src/indexparameters.cpp
  src/sam.cpp
  src/paf.cpp
  src/pc.cpp
  src/aln.cpp
  src/nam.cpp
  src/randstrobes.cpp
  src/readlen.cpp
  src/version.cpp
  src/io.cpp
  ext/xxhash.c
  ext/ssw_cpp.cpp
  ext/ssw.c
)
target_include_directories(salib PUBLIC src/ ext/ ${PROJECT_BINARY_DIR}/wfa2-prefix/src/wfa2 ${PROJECT_BINARY_DIR})
target_link_libraries(salib PUBLIC ZLIB::ZLIB Threads::Threads wfa wfacpp)
if(OpenMP_CXX_FOUND)
  target_link_libraries(salib PUBLIC OpenMP::OpenMP_CXX)
endif()

IF(ENABLE_AVX)
  target_compile_options(salib PUBLIC "-mavx2")
ENDIF()

add_executable(strobealign src/main.cpp)
target_link_libraries(strobealign PUBLIC salib cmake_git_version_tracking)
install(TARGETS strobealign DESTINATION bin)

add_executable(test-strobealign
  tests/tests.cpp
  tests/test_input.cpp
  tests/test_refs.cpp
  tests/test_sam.cpp
)

target_link_libraries(test-strobealign salib)
target_include_directories(test-strobealign PUBLIC src/ ext/ ${PROJECT_BINARY_DIR})

add_executable(dumpstrobes src/dumpstrobes.cpp)
target_link_libraries(dumpstrobes salib)
target_include_directories(dumpstrobes PUBLIC src/ ext/ ${PROJECT_BINARY_DIR})

# Currently unused code for which we only want to ensure that it still compiles
add_executable(unused-code src/unused.cpp)
target_link_libraries(unused-code salib)
target_include_directories(unused-code PUBLIC src/ ext/ ${PROJECT_BINARY_DIR})

add_executable(wfademo src/wfademo.cpp)
target_link_libraries(wfademo wfacpp OpenMP::OpenMP_CXX)
target_include_directories(wfademo PUBLIC src/ ext/ ${PROJECT_BINARY_DIR}/wfa2-prefix/src/wfa2 ${PROJECT_BINARY_DIR})
